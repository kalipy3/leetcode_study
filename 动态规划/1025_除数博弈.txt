1025_除数博弈.txt

:Author: kalipy
:Email: kalipy@debian
:Date: 2020-09-28 19:42


题目：
爱丽丝和鲍勃一起玩游戏，他们轮流行动。爱丽丝先手开局。

最初，黑板上有一个数字 N 。在每个玩家的回合，玩家需要执行以下操作：

    选出任一 x，满足 0 < x < N 且 N % x == 0 。
    用 N - x 替换黑板上的数字 N 。

如果玩家无法执行这些操作，就会输掉游戏。

只有在爱丽丝在游戏中取得胜利时才返回 True，否则返回 False。假设两个玩家都以最佳状态参与游戏。

 

示例 1：

输入：2
输出：true
解释：爱丽丝选择 1，鲍勃无法进行操作。

示例 2：

输入：3
输出：false
解释：爱丽丝选择 1，鲍勃也选择 1，然后爱丽丝无法进行操作。

提示：
    1 <= N <= 1000



参考答案：
方法一：找规律

思路与算法

博弈类的问题常常让我们摸不着头脑。当我们没有解题思路的时候，不妨试着写几项试试：

    N=1的时候，区间 (0,1)中没有整数是 n 的因数，所以此时 Alice 败。
    N=2的时候，Alice 只能拿 1，N 变成 1，Bob 无法继续操作，故 Alice 胜。
    N=3的时候，Alice 只能拿 1，N 变成 2，根据 N=2 的结论，我们知道此时 Bob 会获胜，Alice 败。
    N=4的时候，Alice 能拿 1 或 2，如果 Alice 拿 1，根据 N=3 的结论，Bob 会失败，Alice 会获胜。
    N=5的时候，Alice 只能拿 1，根据N=4 的结论，Alice 会失败。
    ......

写到这里，也许你有了一些猜想。没关系，请大胆地猜想，在这种情况下大胆地猜想是 AC 的第一步。也许你会发现这样一个现象：N 为奇数的时候 Alice（先手）必败，N 为偶数的时候 Alice 必胜。 这个猜想是否正确呢？下面我们来想办法证明它。


下面是代码实现。

代码

class Solution {
public:
    bool divisorGame(int N) {
        return N % 2 == 0;
    }
};

复杂度分析

    时间复杂度：O(1)
    空间复杂度：O(1)

方法二：递推

思路与算法

在「方法一」中，我们写出了前面几项的答案，在这个过程中我们发现，Alice 处在N=k的状态时，他（她）做一步操作，必然使得 Bob 处于 N=m(m<k)的状态。因此我们只要看是否存在一个 m 是必败的状态，那么 Alice 直接执行对应的操作让当前的数字变成 m，Alice 就必胜了，如果没有任何一个是必败的状态的话，说明 Alice 无论怎么进行操作，最后都会让 Bob 处于必胜的状态，此时 Alice 是必败的。

结合以上我们定义 f[i] 表示当前数字 i 的时候先手是处于必胜态还是必败态，true 表示先手必胜，false 表示先手必败，从前往后递推，根据我们上文的分析，枚举 i在 (0,i) 中 i 的因数 j，看是否存在 f[i−j] 为必败态即可。

代码如下:

//动态规划
class Solution {
    public boolean divisorGame(int N) {

        if (N == 1) {
            return false;
        }
        //dp[i]存的是操作数为i时的玩家的获胜情况
        boolean[] dp = new boolean[N+1];

        //初始化dp数组
        dp[1] = false;
        dp[2] = true;

        //遍历3-N并求解整个dp数组
        for (int i = 3; i <= N; i++) {
            //先置dp[i]为false，符合条件则置true
            dp[i] = false;
    
            //玩家都以最佳状态，即玩家操作i后的操作数i-x应尽可能使对手输，即dp[i-x]应尽可能为false 
            //所以遍历x=1~i-1,寻找x的约数，使得dp[i-x]=false，那么dp[i]=true即当前操作数为i的玩家能获胜
            //如果找不到则为false，会输掉
            for (int x = 1; x < i; x++) {
                if (i % x == 0 && !dp[i-x]) {
                    dp[i] = true;
                    break;
                }
            }
        }
        return dp[N];
    }
}



C语言
/* N=1, false                                    */
/* N=2, true                                     */
/* N=3, 只能选1, false                            */
/* N=4, 可以选1/2, 选1会赢, true,                  */
/* 规律, 1) 开始是奇数, 选完后bob肯定是偶数          */
/*          bob选1, alice得到奇数, 最终会输         */
/*       2) 开始是偶数, 选1, bob会得到奇数           */
/*          最终bob会输                             */
/* dp[i]最终状态是false/true                        */
/* 如果可以在(1,i)中找到j, 满足i%j==0, dp[i-j]=false */
/* dp[i]就为true, 能让别人输的, 自己就会赢            */

bool divisorGame(int N){
    bool *dp = (bool*)malloc(sizeof(bool) * (N + 2));
    memset(dp, 0, sizeof(bool) * (N + 2));
    dp[2] = true;
    int i, j;
    for (i = 3; i <= N; i++) {
        for (j = 1; j < i; j++) {
            if (i % j == 0 && dp[i - j] == false) {
                dp[i] = true;
                break;
            }
        }
    }
    return dp[N];
}


