121_买卖股票的最佳时机.txt

:Author: kalipy
:Email: kalipy@debian
:Date: 2020-09-28 20:31


题目：
给定一个数组，它的第 i 个元素是一支给定股票第 i 天的价格。

如果你最多只允许完成一笔交易（即买入和卖出一支股票一次），设计一个算法来计算你所能获取的最大利润。

注意：你不能在买入股票前卖出股票。

 

示例 1:

输入: [7,1,5,3,6,4]
输出: 5
解释: 在第 2 天（股票价格 = 1）的时候买入，在第 5 天（股票价格 = 6）的时候卖出，最大利润 = 6-1 = 5 。
     注意利润不能是 7-1 = 6, 因为卖出价格需要大于买入价格；同时，你不能在买入前卖出股票。

示例 2:

输入: [7,6,4,3,1]
输出: 0
解释: 在这种情况下, 没有交易完成, 所以最大利润为 0。

来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/best-time-to-buy-and-sell-stock
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。


参考答案：
我们需要找出给定数组中两个数字之间的最大差值（即，最大利润）。此外，第二个数字（卖出价格）必须大于第一个数字（买入价格）。

形式上，对于每组 i 和 j（其中j>i）我们需要找出 max(prices[j] - prices[i])
方法一：暴力法

public class Solution {
    public int maxProfit(int prices[]) {
        int maxprofit = 0;
        for (int i = 0; i < prices.length - 1; i++) {
            for (int j = i + 1; j < prices.length; j++) {
                int profit = prices[j] - prices[i];
                if (profit > maxprofit)
                    maxprofit = profit;
            }
        }
        return maxprofit;
    }
}


方法二：动态规划
分析
维护两个变量，只需要一次遍历：
最小元素minVal代表着遍历过的元素中最小值；
最大利润变量maxPro代表截止目前所能获取的最大利润；

思路
    特判：过滤掉空数组情况；
    初始化：
        minVal初始值设置为prices[0]，表示初始值为第一天的股票价格；
        maxPro初始值设置为0，第一天只能买或者不买，不能卖，因此初始值为0；
    遍历，对数组中的每一个元素e做如下处理：
        更新minVal
        更新maxPro = min{maxPro , e-minVal}

代码
class Solution {
    public int maxProfit(int[] prices) {      
        //特判
        if(prices == null || prices.length == 0) return 0; 
        //初始化 
        int minVal = prices[0];  
        int maxPro = 0;
        //遍历
        int len = prices.length;
        for(int i = 0; i < len; i++){     
            minVal = Math.min(minVal, prices[i]);
            maxPro = Math.max(maxPro, prices[i] - minVal);
        }
        return maxPro;
    }
}



方法三：动态规划

本题要求的其实是卖出时与买入时的最大差值。我们不妨假设f(i)表示以第i天为结尾时卖出股票获得的最大收入（差值），那么最后要求的是：

f(i) = max{f(i)| 1 <= i <= n>>};

而f(i)其实还与f(i-1)有关，f(i-1) = p[i-1] - minValue, 其中minValue表示以i-1结尾的前排数组的最小值，故 minValue = p[i-1] - f(i-1)。

那么我们可以得到如下关系： f(i) = max (p[i] - (p[i-1] - f(i-1), 0)) = max (f(i-1) + p[i] - p[i-1], 0); （显然，每次可以当天买进，当天卖出，所以最大收益不应该低于0。）

时间复杂度：O(N)； 空间复杂度：O(1)；

C++代码实现如下↓↓↓

class Solution {
public:
    int maxProfit(vector<int>& prices) {
        if (!prices.size())
            return 0;

        int maxVal = 0;
        int Fiminus1 = 0, Fi = 0;
        for (int i = 1; i <  prices.size(); i++) {
            Fi = max(Fiminus1 + prices[i] - prices[i-1],  0);
            maxVal = max(Fi, maxVal);
            Fiminus1 = Fi;
        }
        return maxVal;
    }
};

___________________________________________________________________________________________________________

我的思考：
    参考思路：
        动态规划:
            前i天的最大收益 = max{前i-1天的最大收益，第i天的价格-前i-1天中的最小价格}
    
    思路还是挺清晰的，还是DP思想：
    
        记录【今天之前买入的最小值】
        计算【今天之前最小值买入，今天卖出的获利】，也即【今天卖出的最大获利】
        比较【每天的最大获利】，取最大值即可
    
    class Solution {
        public int maxProfit(int[] prices) {
            if(prices.length <= 1)
                return 0;
            int min = prices[0], max = 0;
            for(int i = 1; i < prices.length; i++) {
                max = Math.max(max, prices[i] - min);
                min = Math.min(min, prices[i]);
            }
            return max;
        }
    }


