121_买卖股票的最佳时机.txt

:Author: kalipy
:Email: kalipy@debian
:Date: 2020-09-28 20:31


题目：
给定一个数组，它的第 i 个元素是一支给定股票第 i 天的价格。

如果你最多只允许完成一笔交易（即买入和卖出一支股票一次），设计一个算法来计算你所能获取的最大利润。

注意：你不能在买入股票前卖出股票。

 

示例 1:

输入: [7,1,5,3,6,4]
输出: 5
解释: 在第 2 天（股票价格 = 1）的时候买入，在第 5 天（股票价格 = 6）的时候卖出，最大利润 = 6-1 = 5 。
     注意利润不能是 7-1 = 6, 因为卖出价格需要大于买入价格；同时，你不能在买入前卖出股票。

示例 2:

输入: [7,6,4,3,1]
输出: 0
解释: 在这种情况下, 没有交易完成, 所以最大利润为 0。

来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/best-time-to-buy-and-sell-stock
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。


参考答案：
我们需要找出给定数组中两个数字之间的最大差值（即，最大利润）。此外，第二个数字（卖出价格）必须大于第一个数字（买入价格）。

形式上，对于每组 i 和 j（其中j>i）我们需要找出 max(prices[j] - prices[i])
方法一：暴力法

public class Solution {
    public int maxProfit(int prices[]) {
        int maxprofit = 0;
        for (int i = 0; i < prices.length - 1; i++) {
            for (int j = i + 1; j < prices.length; j++) {
                int profit = prices[j] - prices[i];
                if (profit > maxprofit)
                    maxprofit = profit;
            }
        }
        return maxprofit;
    }
}

方法二：
    思路还是挺清晰的，还是DP思想：
    
        记录【今天之前买入的最小值】
        计算【今天之前最小值买入，今天卖出的获利】，也即【今天卖出的最大获利】
        比较【每天的最大获利】，取最大值即可
    
    class Solution {
        public int maxProfit(int[] prices) {
            if(prices.length <= 1)
                return 0;
            int min = prices[0], max = 0;
            for(int i = 1; i < prices.length; i++) {
                max = Math.max(max, prices[i] - min);
                min = Math.min(min, prices[i]);
            }
            return max;
        }
    }




___________________________________________________________________________________________________________

我的思考：
    参考思路：
            前i天的最大收益 = max{前i-1天的最大收益，第i天的价格-前i-1天中的最小价格}
     
    1.不妨大胆猜想(自己凭空思考得出，动态规划的参考思路只是前人思考的结果，自己凭空的思考才是原因、本质)：
        1式..............dp[i+1] = max(dp[i],nums[i+1]-minxx)      
        2式..............res     = max{res,nums[i+1]-minxx }

    2.其实，1公式与2公式本质是一样的，1公式是数学表示，2公式是代码表示，显然我们写代码选择公式2

    3.由于nums的下标不能为nums[i+1]，即越界，所以1式改为：
        1式..............dp[i] = max(dp[i-1],nums[i]-minxx)  
    2式改为：
        2式..............res     = max{res,nums[i]-minxx }
        
        

    3.代码实现：
        class Solution {
            public int maxProfit(int[] prices) {
                if(prices.length <= 1)
                    return 0;
                int res = 0;//dp[0]的初始值，由自己观察得出
                int min = prices[0];//自己观察得出
                for(int i = 0; i < prices.length; i++) {//注意：这里i=0,和参考答案的不一样，参考答案是从i=1开始
                    res = Math.max(res, prices[i] - min);//2式
                    min = Math.min(min, prices[i]);
                }
                return res;
            }
        } 
